# Various tools for generating users and posts

import datetime
import random
import markovify
import typing as _t
from string import ascii_letters
from ticktock import config, utils
from ticktock.app import app, db
from ticktock.logging import getLogger
from ticktock.model import User, Post

_DEFAULT_TS_HOURS_DELTA: _t.Final[int] = 5


def generate_user(args, password_len: int = 12):
    logger = getLogger()
    kwargs = {}

    if args.username is None:
        # Create a ranodm username, formatted as {firstname}_{lastname}{numbers}
        with open(config.wordlists / "usa-top1000.txt", "r") as f:
            names = f.readlines()
            firstname = random.choice(names).lower().rstrip()

        with open(config.wordlists / "familynames-usa-top1000.txt", "r") as f:
            names = f.readlines()
            lastname = random.choice(names).lower().rstrip()

        num = random.randint(0, 100000)
        args.username = f"{firstname}_{lastname}{num}"

    kwargs["username"] = args.username

    # Generate a random password (not secure; random.choices does not use a CRNG)
    if args.password is None:
        kwargs["password"] = "".join(random.choices(ascii_letters, k=password_len))
    else:
        kwargs["password"] = args.password

    if args.uid is not None:
        kwargs["uid"] = args.uid

    with app.app_context():
        user = User(**kwargs)
        db.session.add(user)
        db.session.commit()

    # Get the ID of the user who was added to the database
    with app.app_context():
        user = User.query.filter_by(username=kwargs["username"]).first()
    logger.info("Added user = %s", repr(user))

    # Add a profile picture for the user
    imgs = list(config.misc_img.glob("profile_default_*"))
    img = random.choice(imgs)
    utils.change_avatar(user.uid, img)


def generate_post(args):
    # Use a Markov chain to generate a random post from the corpus
    with open(config.wordlists / "markov_corpus.txt", "r") as f:
        corpus = f.read()

    if (ts := args.start_time) is None:
        ts = datetime.datetime.utcnow() - datetime.timedelta(hours=_DEFAULT_TS_HOURS_DELTA)
    else:
        ts = datetime.datetime.strptime(ts, "%Y/%m/%d %H:%M:%S")

    if (te := args.end_time) is None:
        te = datetime.datetime.utcnow()
    else:
        te = datetime.datetime.strptime(te, "%Y/%m/%d %H:%M:%S")

    if not (ts <= te):
        raise ValueError("start_time must be <= end_time")

    if args.message is not None and args.number > 1:
        raise ValueError("--number must be 1 if --message is not None")

    # Create a model over the corpus and generate some random posts
    model = markovify.Text(corpus)
    post_args = {"author_id": args.user}

    if args.post_id is not None:
        post_args["post_id"] = args.post_id

    if args.message is not None:
        content = [args.message]
    else:
        content = [model.make_short_sentence(280) for _ in range(args.number)]

    with app.app_context():
        for c in content:
            post_args["posted"] = random.random() * (ts - te) + ts
            post_args["content"] = c
            post = Post(**post_args)
            db.session.add(post)

        db.session.commit()


def add_subcommands(subparsers):
    genuser_parser = subparsers.add_parser("genuser", help="Generate a random user")
    genuser_parser.set_defaults(func=generate_user)
    genuser_parser.add_argument(
        "-u",
        "--username",
        default=None,
        type=str,
        help=(
            "The username of the new user. If set to None, a username is " "randomly generated.",
        ),
    )
    genuser_parser.add_argument(
        "-i",
        "--uid",
        default=None,
        type=int,
        help=("The UID that should be assigned to the user. Auto-assigned by default."),
    )
    genuser_parser.add_argument(
        "-p",
        "--password",
        default=None,
        type=str,
        help="The password to give to the user. Randomly generated by default.",
    )

    genpost_parser = subparsers.add_parser("genpost", help="Generate a random post")
    genpost_parser.set_defaults(func=generate_post)
    genpost_parser.add_argument(
        "-u",
        "--user",
        type=int,
        required=True,
        help="The UID of the user who the post should be generated under",
    )
    genpost_parser.add_argument(
        "-i",
        "--post_id",
        type=int,
        help="The ID to assign to the newly generated post",
    )
    genpost_parser.add_argument(
        "-n",
        "--number",
        type=int,
        default=1,
        help="The number of posts to generate",
    )
    genpost_parser.add_argument(
        "-ts",
        "--start_time",
        default=None,
        help=(
            "The earliest timestamp that can be attached to posts. If set to None, "
            f"this defaults to {_DEFAULT_TS_HOURS_DELTA} hours before the current time"
        ),
    )
    genpost_parser.add_argument(
        "-te",
        "--end_time",
        default=None,
        help=(
            "The latest timestamp that can be attached to posts. If set to None, "
            "this defaults to the current time."
        ),
    )
    genpost_parser.add_argument(
        "-m",
        "--message",
        default=None,
        help=(
            "The message to generate. If set to None, a message is randomly generated "
            "using a Markov chain."
        ),
    )
