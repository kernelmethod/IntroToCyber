"""
Django settings for sundyl project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import socket
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DOMAIN = os.getenv("BASE_DOMAIN", "sundyl.lab")
# CDN_DOMAIN = f"cdn.{BASE_DOMAIN}"
CDN_DOMAIN = "minio"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-7_)@=sfv0su!ol8&mh0vahbv)u4&8=7^1f*hf(@^usicm59e%y"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DJANGO_DEBUG", 0)))
USE_SQLITE = bool(int(os.getenv("DJANGO_USE_SQLITE", 0)))
USE_LOCAL_STORAGE = bool(int(os.getenv("DJANGO_USE_LOCAL_STORAGE", 0)))

ALLOWED_HOSTS = [f"www.{BASE_DOMAIN}", BASE_DOMAIN, "localhost", socket.gethostname()]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "sundyl.commands",
    "sundyl.login",
    "sundyl.search",
    "sundyl.social",
    "sundyl.support",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "sundyl.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "sundyl" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "sundyl.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

if USE_SQLITE:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "web.db",
        }
    }
else:
    if (POSTGRES_PASSWORD := os.getenv("POSTGRES_PASSWORD")) is None:
        with open(os.environ["POSTGRES_PASSWORD_FILE"], "r") as f:
            POSTGRES_PASSWORD = f.read().rstrip()

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "webdata",
            "USER": os.environ["POSTGRES_USER"],
            "PASSWORD": POSTGRES_PASSWORD,
            "HOST": "postgres",
            "PORT": "5432",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

DEFAULT_PROFILE_IMAGE = "defaults/avatar"
STATICFILES_DIRS = [BASE_DIR / "static"]

if not USE_LOCAL_STORAGE:
    # Use MinIO for storage
    if (password := os.getenv("MINIO_ROOT_PASSWORD")) is None:
        with open(os.environ["MINIO_ROOT_PASSWORD_FILE"], "r") as f:
            password = f.readline().rstrip()

    AWS_ACCESS_KEY_ID = os.environ["MINIO_ROOT_USER"]
    AWS_SECRET_ACCESS_KEY = password
    AWS_STORAGE_BUCKET_NAME = os.environ["WEB_STATIC_BUCKET"]
    AWS_S3_ENDPOINT_URL = os.environ["MINIO_SERVER_URL"]
    AWS_S3_CUSTOM_DOMAIN = CDN_DOMAIN
    AWS_S3_URL_PROTOCOL = "http:"

    _static_bucket = os.getenv("WEB_STATIC_BUCKET", "www")

    STATIC_URL = f"http://www.{CDN_DOMAIN}/"
    MEDIA_URL = f"http://www-media.{CDN_DOMAIN}/"
    DEFAULT_FILE_STORAGE = "sundyl.storage.MediaStorage"
    STATICFILES_STORAGE = "sundyl.storage.StaticStorage"
else:
    STATIC_ROOT = Path("/") / "var" / "www" / "static"
    STATIC_URL = "/static/"
    MEDIA_ROOT = Path("/") / "var" / "www" / "media"
    MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
LOGIN_REDIRECT_URL = "/"

# Flags

FLAG_CSRF = os.getenv("FLAG_CSRF", "flag{csrf:dummy_flag}")
FLAG_XSS = os.getenv("FLAG_XSS", "flag{xss:dummy_flag}")
